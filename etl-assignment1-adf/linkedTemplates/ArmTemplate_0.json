{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etl-assignment1-adf"
		},
		"etl_assignment1_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'etl_assignment1_ls'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/etl_assignment1_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('etl_assignment1_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/additional_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "AdditionalData.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/appended_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "AppendedData.csv",
						"container": "transformed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					},
					{
						"name": "CleanedProductName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleaned_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CleanedData.csv",
						"container": "transformed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					},
					{
						"name": "CleanedProductName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/merged_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MergedData.csv",
						"container": "transformed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					},
					{
						"name": "CleanedProductName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SSIS_Assignment_Data.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformed_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etl_assignment1_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TransformedData.csv",
						"container": "transformed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CleanupProductName')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "transformed_data",
								"type": "DatasetReference"
							},
							"name": "TransformedData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cleaned_data",
								"type": "DatasetReference"
							},
							"name": "CleanedData",
							"rejectedDataLinkedService": {
								"referenceName": "etl_assignment1_ls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnCleanedProductName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as integer,",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          Price as float,",
						"          TotalAmount as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TransformedData",
						"TransformedData derive(CleanedProductName = regexReplace(ProductName, '[^A-Za-z0-9]+', ' ')) ~> DerivedColumnCleanedProductName",
						"DerivedColumnCleanedProductName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          TotalAmount as string,",
						"          CleanedProductName as string",
						"     ),",
						"     partitionFileNames:['CleanedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CleanedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/transformed_data')]",
				"[concat(variables('factoryId'), '/datasets/cleaned_data')]",
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTotalAmount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw",
								"type": "DatasetReference"
							},
							"name": "SSISAssignmentData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "transformed_data",
								"type": "DatasetReference"
							},
							"name": "TransformedData",
							"rejectedDataLinkedService": {
								"referenceName": "etl_assignment1_ls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnTotalAmount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as integer,",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          Price as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SSISAssignmentData",
						"SSISAssignmentData derive(TotalAmount = multiply(Quantity,Price)) ~> DerivedColumnTotalAmount",
						"DerivedColumnTotalAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          TotalAmount as string",
						"     ),",
						"     partitionFileNames:['TransformedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          TransactionID,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          Price,",
						"          TotalAmount",
						"     ),",
						"     partitionBy('hash', 1)) ~> TransformedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw')]",
				"[concat(variables('factoryId'), '/datasets/transformed_data')]",
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cleaned_data",
								"type": "DatasetReference"
							},
							"name": "CleanedData"
						},
						{
							"dataset": {
								"referenceName": "additional_data",
								"type": "DatasetReference"
							},
							"name": "AdditionalData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "merged_data",
								"type": "DatasetReference"
							},
							"name": "MergedData",
							"rejectedDataLinkedService": {
								"referenceName": "etl_assignment1_ls",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "appended_data",
								"type": "DatasetReference"
							},
							"name": "AppendedData",
							"rejectedDataLinkedService": {
								"referenceName": "etl_assignment1_ls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinSources"
						},
						{
							"name": "RemoveDuplicatedColumns"
						},
						{
							"name": "UnionSources"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as integer,",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          Price as float,",
						"          TotalAmount as float,",
						"          CleanedProductName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> CleanedData",
						"source(output(",
						"          TransactionID as integer,",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Quantity as float,",
						"          Price as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> AdditionalData",
						"CleanedData, AdditionalData join(CleanedData@ProductID == AdditionalData@ProductID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSources",
						"JoinSources select(mapColumn(",
						"          TransactionID = CleanedData@TransactionID,",
						"          ProductID = CleanedData@ProductID,",
						"          ProductName = CleanedData@ProductName,",
						"          Quantity = CleanedData@Quantity,",
						"          Price = CleanedData@Price,",
						"          TotalAmount,",
						"          CleanedProductName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicatedColumns",
						"AdditionalData, CleanedData union(byName: true)~> UnionSources",
						"RemoveDuplicatedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          TotalAmount as string,",
						"          CleanedProductName as string",
						"     ),",
						"     partitionFileNames:['MergedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MergedData",
						"UnionSources sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          TotalAmount as string,",
						"          CleanedProductName as string",
						"     ),",
						"     partitionFileNames:['AppendedData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AppendedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cleaned_data')]",
				"[concat(variables('factoryId'), '/datasets/additional_data')]",
				"[concat(variables('factoryId'), '/datasets/merged_data')]",
				"[concat(variables('factoryId'), '/linkedServices/etl_assignment1_ls')]",
				"[concat(variables('factoryId'), '/datasets/appended_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_cleanup_transformed_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanupProductName",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CleanupProductName",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TransformedData": {},
									"CleanedData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CleanupProductName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_merge_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MergeData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MergeData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CleanedData": {},
									"AdditionalData": {},
									"MergedData": {},
									"AppendedData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MergeData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_raw_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateTotalAmount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateTotalAmount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SSISAssignmentData": {},
									"TransformedData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "transform"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T10:04:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateTotalAmount')]"
			]
		}
	]
}